#
#   sample.conf -- Sample (Maximal) Configuration for the Embedthis Appweb HTTP Server
#
#   This sample demonstrates many directives that can be used in an appweb.conf file.
#   Do not use this file directly, it is too verbose. Rather cut the sections you need
#   into your own, minimal configuration file.

#
#   Server home directory for Appweb to find configuration files.
#   Appweb will change directory to this location when it runs.
#
#   Home "."

#
#   Define the logging configuration first so any errors are logged.
#   This is for errors and debug trace. This log file is for the whole
#   server including virtual hosts. This is overridden by appweb
#   command line args: -v and --log.
#
ErrorLog "error.log" size=10MB level=2 backup=5 anew

#
#   Request and operational trace log
#
#   TraceLog "trace.log" size=10MB backup=5 anew formatter=pretty
#   TraceLog "access.log" level=4 size=10MB backup=5 anew formatter=common format="%h %l %u %t "%r" %>s %b %n"

#
#   This directive defines the levels at which various events are logged.
#
#   Trace error=1 request=2 result=2 headers=3 context=4 packet=5 detail=6 content=10K

#
#   The user name and group to become. The fake name APPWEB will change
#   user/group to the Appweb default user/group if running as root/adminstrator.
#   This is www on MAC, nobody/nogroup on Linux, and administrator on Windows.
#   The fake name _unchanged_ means don't change the user or group.
#   NOTE: ESP requires write access to the cache directory If you wish to
#   backup log files, you must have write permission to the log file directory.
#
GroupAccount APPWEB
UserAccount APPWEB

#
#   By default HTTP/2 is enabled. HTTP/1 is always enabled. This directive can be
#   used to disable HTTP/2 at runtime. It must be before any ListenSecure directive.
#
# Http2 on

#
#   Create a "chroot jail" by changing the system root directory to this
#   directory. Once changed files outside the jail will be inaccessible.
#   If rotating log files, must do Chroot before defining logs.
#   You may need to make directories accessible inside the jail.
#
#   MakeDir APPWEB:APPWEB:0755 /var/spool/appweb/embedthis/cache
#   Chroot "."

#
#   Bind Appweb to listen for incoming requests on this address. Formats
#   include (IP, IP:PORT, PORT). If an IP address is omitted, Appweb will
#   listen on all interfaces. If a port is omitted, then port 80 is used.
#   If the O/S has a dual-stack network, then connections on both IPv4 and
#   IPv6 will be accepted. Use [::]:port to explicitly listen to only IPv6
#   requests. [::1] is the IPv6 loopback. Use 0.0.0.0:port to listen to only
#   IPv4 requests. This directive may be specified via the include.conf above.
#   On Linux, can add "multiple" to permit multiple binding and load balancing.
#
Listen 80

#
#   Name of the server to use for redirects and error responses to clients.
#   Uncomment this line and replace it with the public name of your server.
#   This host name and port do not get used for listening on sockets. If
#   unspecified, Appweb will use the IP address for the host name.
#   NOTE: Only define a CanonicalName if you are not using a ListenSecure
#   directive for SSL. Otherwise, redirects will always go to the address
#   you define here regardless of http or https. If you need to use a
#   CanonicalName with SSL, use a VirtualHost to define your SSL endpoint.
#
#   CanonicalName http://example.com

#
#   Location for documents for the primary server host. Routes and virtual
#   hosts may define their own document root.
#   This directive may be specified via the include.conf above.
#
Documents ./web

#
#   Set a default character set for use with Content-Type headers
#
CharSet utf-8

#
#   Search path for dynamically loadable modules. If modules have been
#   statically linked into Appweb, this directive and LoadModule directives
#   will be ignored. This directive must be before any LoadModule directives.
#   The default path is: dir-containing-executable : /usr/lib/appweb/bin
#   Use ";" as a separator on windows.
#
#   LoadModulePath "/directory/to/modules:/other/directory"
#   LoadModule myModule libmod_my
#

#
#   Enable emitting debug error messages back to the client. Defaults to "off".
#   WARNING: this may disclose unwanted information. Do not enable in production releases.
#
ShowErrors off

#
#   Don't disclose Server header
#
Stealth on

#
#   SSL/TLS configuration
#
<if SSL_MODULE>
    #
    #   The SSL port may be defined in install.conf at install time.
    #   On Linux, can add "multiple" to permit multiple binding and load balancing.
    #
    ListenSecure 443

    #
    #   SECURITY NOTE: this is using a test self-signed certificate.
    #   You must obtain or generate a private key and certificate to use.
    #   Use a decrypted key here so it won't prompt for the password when
    #   the server is restarted.
    #
    SSLCertificateFile      "${BIN_DIR}/self.crt"
    SSLCertificateKeyFile   "${BIN_DIR}/self.key"

    #
    #   Mozilla recommended cipher suite (this is the default for OpenSSL)
    #
    #   SSLCipherSuite ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA: AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4:!SSLv3

    #
    #   Preferred Cipher suite for MbedTLS. This provides perfect forward secrecy and avoids weak and obsolete ciphers
    #
    SSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    SSLCipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    SSLCipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
    SSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CCM
    SSLCipherSuite TLS_DHE_RSA_WITH_AES_256_CCM
    SSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    SSLCipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
    SSLCipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
    SSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8
    SSLCipherSuite TLS_DHE_RSA_WITH_AES_256_CCM_8
    SSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    SSLCipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    SSLCipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
    SSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CCM
    SSLCipherSuite TLS_DHE_RSA_WITH_AES_128_CCM
    SSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    SSLCipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    SSLCipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
    SSLCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8
    SSLCipherSuite TLS_DHE_RSA_WITH_AES_128_CCM_8
    SSLCipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384
    SSLCipherSuite TLS_RSA_WITH_AES_256_CCM
    SSLCipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256
    SSLCipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    SSLCipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
    SSLCipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    SSLCipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    SSLCipherSuite TLS_RSA_WITH_AES_256_CCM_8
    SSLCipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256
    SSLCipherSuite TLS_RSA_WITH_AES_128_CCM
    SSLCipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256
    SSLCipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
    SSLCipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
    SSLCipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    SSLCipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    SSLCipherSuite TLS_RSA_WITH_AES_128_CCM_8

    #
    #   Redirect all traffic over HTTPS
    #
    #   Redirect secure

    #
    #   This will force browsers to insist on TLS connections only for one year
    #
    #   Strict-Transport-Security max-age=31536000; includeSubDomains
</if>

#
#   Select the type of authentication password store. Select "system" for the default
#   system password store. Currenly only support Unix PAM. Set to "config" for the
#   file-based password store in auth.conf.
#
#   AuthStore system

#
#   Authorization directives. You can add these directives to apply to the entire
#   server and all routes after this point. Alternatively, put inside a VirtualHost
#   or Route block to localize to that block. By convention, the auth.conf file
#   contains User and Role definitions. This can be used when using the "config" auth
#   store to provide users, passwords and roles. If using the "system" store, it
#   can be used to map user groups to Appweb roles and abilities.
#
#   include auth.conf

#
#   Form-based authentication. The realm is required if not using PAM password
#   stores. This redirects unauthenticated accesses to https /admin/login.esp
#   which is a login form The /login url is used to process a posted with
#   username and password fields. For more details, see:
#   https://www.embedthis.com/products/appweb/doc/guide/users/authentication.html.
#
#   AuthType form example.com https:///admin/login.esp https:///login /logout /home.html

#
#   Digest authentication.
#
#   AuthType digest example.com

#
#   Remove default security headers
#
#   Header remove Content-Security-Policy
#   Header remove X-Frame-Options
#   Header remove X-XSS-Protection
#   Header remove X-Content-Type-Options

#
#   Permit cross origin XMLHttp sharing
#
#   CrossOrigin origin=* credentials=yes headers=X-CORS-HEADER age=3000

#
#   Defensive counter-measures
#       System-Wide Counters:
#           - ActiveClients, ActiveConnections, ActiveRequests, ActiveProcesses, Memory
#       Per-Client Counters:
#           - BadRequestErrors, Errors, LimitErrors, NetworkIO, NotFoundErrors, Requests, SSLErrors
#       Remedies:
#           - ban, cmd, delay, email, http, log
#       Tokens:
#           - CMD, DELAY, FROM, IP, MESSAGE, PERIOD, STATUS, SUBJECT, TO, METHOD, URI
#   Examples:
#	    Defense block REMEDY=ban PERIOD=30mins
#       Defense report REMEDY=http URI=http://example.com/report
#	    Defense alarm REMEDY=cmd CMD="afplay klaxon.mp3"
#	    Defense slow REMEDY=delay PERIOD=10mins DELAY=1sec
#	    Defense fix REMEDY=cmd CMD="${MESSAGE} | sendmail admin@example.com"
#       Defense notify REMEDY=email TO=info@example.com
#       Defense firewall REMEDY=cmd CMD="iptables -A INPUT -s ${IP} -j DROP"
#       Defense reboot REMEDY=restart
#
#   Defense block REMEDY=ban PERIOD=10mins
#   Defense report REMEDY=log
#   Monitor "Errors > 30" 1min block report

#
#   Notes on the request processing pipeline. The pipeline consists of a set
#   of stages comprised of a handler, possible filters and one network
#   connector.
#
#   The request processing pipeline can be configured at various levels:
#   globally, virtual hosts and location blocks. At each level, a set of
#   processing stages can be defined. Inner levels inherit the pipeline from
#   the outer levels. The pipeline can be reset at a level by using
#   "Reset pipeline". Each stage may be defined for all requests or only for a
#   specific file extension or location path prefix.
#
#   If you use the AddFilter or AddHandler directives, the stage is defined
#   for both input and output processing. For filters you can use AddInputFilter
#   AddOutputFilter directives to define for a single direction.
#
#   Multiple handlers can be defined, but only the first matching handler will
#   be activated when a request is processed.

#
#   File upload.
#   Enable of the uploadFilter. Always upload to dedicated directory outside the documents directory.
#   Always process uploaded files in your handler and use AutoDelete to remove uploaded files when processed.
#   Always have the upload filter inside a route.
#   Handlers receive upload file information via form variables.
#   Most PHP apps require upload to be disabled, do this via:
#       StreamInput multipart/form-data [URI]
#   SECURITY NOTE: Check the LimitUpload to cap the maximum upload.
#
<if UPLOAD>
<Route ^/upload/>
    Prefix              /upload
    AddFilter           uploadFilter
    UploadDir           /tmp/uploads
    UploadAutoDelete    on
    RequestTimeout      5mins
    LimitUpload         1GB
</Route>
</if>

#
#   For CGI scripts, such as your Perl scripts make sure that you have
#   "#!/PerlPath" as the first line. This works on Windows as well.
#   The .bat and .cmd extensions are really only for Windows.
#
<if CGI_MODULE>
    #
    #   WARNING: for information about CGI security, read:  http://www.w3.org/Security/faq/wwwsf4.html
    #
    #   In almost all cases, there is a better choice than CGI which is slower and more difficult to secure.
    #   Enable CGI only if you are ready for this challenge.
    #
    #   Only ever run CGI programs from outside the documents directory
    #
    <Route ^/cgi-bin/(.*)>
        AddHandler cgiHandler exe cgi cgi-nph out bat cmd pl py
        LimitProcesses 10

        Documents "./cgi-bin"
        SetHandler cgiHandler
        Target run $1

        #
        #   These actions specify the program to run for each Perl or Python
        #   script. They map to the extensions specified in the mime.types for for
        #   these mime types. Alternatively, you may use put all your scripts in
        #   the subdirectories specified by the releavant Route blocks below.
        #   For perl and python, you can also put "#!/path/to/program" as the first
        #   line. This works on Windows as well. The .bat and .cmd extensions are
        #   really only for Windows. For Windows, update the program paths with
        #   the right paths.
        #
        Action application/x-perl /usr/bin/perl
        Action application/x-python /usr/bin/python
        Action application/x-lua /usr/bin/lua
        Action application/x-ruby /usr/bin/ruby
        LimitProcesses 10

        #
        #   URI query parameters and form variables are defined as environment variables. If using
        #   shell scripts as CGI programs, you should ensure important shell variables like IFS,
        #   SHELL and PATH are not overwritten or corrupted. Use a prefix to ensure parameters
        #   have their own namespace.
        CgiPrefix CGI_

        #
        #   If using shell scripts as CGI programs, it is useful to escape all special shell characters
        #   to make scripting easier. This will escape (with \) the following characters:
        #   &;`'\"|*?~<>^()[]{}$\\\n and also on windows \r%
        #
        CgiEscape on
    </Route>
<else>
    AddHandler errorHandler exe cgi cgi-nph out bat cmd pl py
</if>

#
#   FastCGI scripts
#
<if FAST_MODULE>
    LoadModule fastHandler libmod_fast
    Action application/x-php /usr/local/bin/php-cgi

    #   For PHP, use an action script like:
    #
    #   #!/bin/bash
    #   export PHP_FCGI_CHILDREN=0
    #   export PHP_FCGI_MAX_REQUESTS=0
    #   exec /usr/local/bin/php-cgi

    FastConnect 127.0.0.1
    AddHandler fastHandler php
<else>
    AddHandler errorHandler exe cgi cgi-nph out bat cmd pl py
</if>

#
#   Proxied applications
#
<if PROXY_MODULE>
    #   <Route ^/proxy/(.*)$>
    #       Reset pipeline
    #       SetHandler proxyHandler
    #       Prefix /proxy
    #       CanonicalName https://example.com
    #       ProxyConnect 127.0.0.1:9999 launch="${BIN_DIR}/appweb --config proxy.conf" http2 ssl
    #       <ProxyConfig>
    #           InactivityTimeout     1min
    #           SSLVerifyClient       off
    #           SSLCertificateFile    "${BIN_DIR}/test.crt"
    #           SSLCertificateKeyFile "${BIN_DIR}/test.key"
    #           SSLProtocol           ALL -SSLv2 -SSLv3 -TLSv1.0
    #           SSLCipherSuite        TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    #       </ProxyConfig>

    #   </Route>
</if>

#
#   Directory listings. This provides a HTML directory list of the directory
#   corresponding to the URI.
#   SECURITY: This enables attackers to read directory contents.
#   SECURITY: Do not do this outside a scoping route.
#
#   <if DIR_MODULE>
#       <Route /URI-to-list>
#           Options Indexes
#           IndexOrder ascending name
#           IndexOptions FancyIndexing FoldersFirst
#       </Route>
#   </if>

#
#   Enable the action handler for simple URI to "C" bindings
#
<Route ^/action/>
    SetHandler actionHandler
</Route>

<if ESP_MODULE>
    AddHandler espHandler esp
    # EspApp path/to/esp.json
<else>
    AddHandler errorHandler esp
</if>

#
#   The fileHandler serves all other extensions
#
AddHandler fileHandler

#
#   Add the trace method if required
#
#   Methods add TRACE

#
#   WARNING: this will enable the PUT and DELETE methods to upload and remove
#   documents. Only do this inside routes intended for that purpose.
#
#   <Route /puttable>
#       Documents ./modifyable
#       Methods set GET, PUT, DELETE
#   </Route>

#
#   Set a default response cache lifespan
#
Cache 1day

#
#   Session state duration.
#
SessionTimeout 30mins

#
#   Set the cookie name and determine if the cookie is visible to Javascript
#   (default is httponly, invisible to scripts). Making cookies visible
#   increases the XSS potential.
#
#   SessionCookie name=NAME persist=false visible=false same=lax|strict


#
#   Maximum duration to parse the request headers
#
RequestParseTimeout 5sec

#
#   Maximum request duration.
#
RequestTimeout 10mins

#
#   Maximum request and connection inactivity duration
#
InactivityTimeout 1min

#
#   Request timeout to gracefully complete requests when appweb is terminating or restarting
#
ExitTimeout 2secs

#
#   Maximum number of worker threads in the Appweb worker pool. Must have at
#   least one. One thread will effectively single-thread the server. Appweb
#   will automatically adjust the number of workers between the minimum
#   specified by the MinWorkers and the maximum specified here. Every ten
#   minutes, Appweb will prune workers that have been idle for five minutes.
#   Appweb has two non-worker threads: one for the master event loop and one
#   for the garbage collector. So the total number of Appweb threads will be
#   two plus the number of active workers.
#
#   Each worker can handle many simultaneous requests. Don't set workers more
#   than the numbers of CPU Cores Less is often more effective than more workers.
#
#
LimitWorkers 2

#
#   Minimum number of worker threads. Pre-start and always preserve this
#   number of workers threads.
#
#   MinWorkers 1

#
#   Memory allocation error policy. This defines what Appweb will do if
#   the memory limit defined by LimitMemory is exceeded. Set to "continue",
#   to prune non-critical response cache and session state, but continue running.
#   This make the memory limit a soft limit. Set to "restart" to do a
#   graceful shutdown and then appman will restart appweb. Set to "abort" to
#   abort and dump core.
#
MemoryPolicy restart

#
#   Maximum packet size for pipeline queues
#
LimitPacket 32K

#
#   Maximum application memory. Invokes MemoryPolicy if exceeded.
#    Redline at 95%.
#
LimitMemory 100MB

#
#   Maximum cache size for response caching and sessions
#
LimitCache 10MB

#
#   Maximum item size that can be cached
#
LimitCacheItem 200K

#
#   Maximum number of simultaneous client IP addresses. Set to zero for unlimited.
#
LimitClients 20

#
#   Maximum response chunk size
#
LimitChunk 64K

#
#   Maximum number of total client connections.
#
LimitConnections 50

#
#   Maximum number of open files/sockets on unix systems.
#   Set to zero for the maximum possible value.
#
LimitFiles 0

#
#   Maximum number of simultaneous network connections per client. This helps prevent denial of service attacks.
#
LimitConnectionsPerClient 20

#
#   Maximum number of simultaneous requests per client. This helps prevent denial of service attacks.
#
LimitRequestsPerClient 20

#
#   Number of HTTP requests to accept on a single TCP/IP connection
#   Reduce this number to minimize the chance of DoS attacks.
#
LimitKeepAlive 200

#
#   Maximum size of the total request content body including header. Excludes file upload.
#
LimitRequestBody 100K

#
#   Maximum size of a request form
#
LimitRequestForm 32K

#
#   Maximum size of request header
#
LimitRequestHeader 32K

#
#   Maximum number of request header lines
#
LimitRequestHeaderLines 64

#
#   Maximum size of the maximum response body
#
LimitResponseBody 2GB

#
#   Limit the number of client session state stores
#
LimitSessions 100

#
#   Maximum number of simultaneous HTTP/2 streams per network connection.
#
LimitStreams 20

#
#   Maximum uploaded file size
#
LimitUpload 1GB

#
#   Maximum request URI size
#
LimitUri 8K

#
#   WARNING: Change this very carefully. Typically operating systems with
#   virtual memory can effectively allocate the stack size. Systems with
#   non-virtual memory may need to define this.
#   ThreadStack 64K

#
#   Cache static content at the client
#   This sets an cache expiry period (secs) for content. Clients will refresh
#   only if content is stale in their local cache. This defines a set of file
#   extensions for which Expires/Cache-Control headers will be generated.
#
#       Cache client=1day extensions="html,gif,jpeg,jpg,png,pdf,ico,js,txt"
#
#   Cache specific URIs at the server with a lifespan of one hour
#   All requests with the same URI path, regardless of request params are
#   cached as one.
#
#       Cache server=1hour /cache.esp /cache.php /cache.ejs /cache.cgi
#
#   To define a document to present for errors. If the URI is local the
#   error document will be served with the original status code. If the URI
#   is not local (starts with http), then a redirect (302) status code will
#   be used to redirect the client to the error document.
#   Note: Failing ejs requests will always redirect.
#
#       ErrorDocument 404 /notFound.html
#
#   Other useful directives
#
#       Redirect temp /pressRelease.html https://${request:serverName}/fixedPressRelease.html
#       Redirect temp /pressRelease.html /fixedPressRelease.html
#       Redirect 410 /membersOnly
#       Redirect secure
#       AddLanguage en english
#       AddLanguageRoot en englishContentDir
#       DefaultLanguage fr
#       StreamInput [!] mimeType
#       TypesConfig "mime.types"

#
#   Emergency DOS protection
#   If under attack, these directives may be useful
#
#       Deny IPaddr-or-hosts
#       LimitKeepAlive 20
#       InactivityTimeout 15sec

#
#   Create a virtual host
#
#       <VirtualHost *:5000>
#           Listen 5000
#           Documents web
#       </VirtualHost>
#
#   Useful Route directives
#
#   <Route /pattern>
#       # Restrict the permissible methods. Default is to allow GET, HEAD, OPTIONS, POST.
#       Methods set POST
#   </Route>
#
#   Serve gziped files if an equivalent file with a "*.gz" extension exists
#       Map compressed
#
#   Route for WebSockets with an ESP handler
#
#   <Route ^/websockets/{controller}/{action}$>
#       Prefix /websockets
#       AddFilter               webSocketFilter
#       AddHandler              espHandler
#       Source                  src/websockets.c
#       Target                  run $1-$2
#
#       # Optimal to have the frame limit smaller than the packet limit. # This way
#       # complete frames can be transferred. The Frame limit is a soft limit and can
#       # be exceeded. Outgoing messages are broken into frames of this size.
#
#       LimitWebSocketsFrame    4K
#       LimitWebSocketsPacket   50K
#       LimitWebSockets         20
#       LimitWebSocketsMessage  50K
#       RequestTimeout          unlimited
#       InactivityTimeout       unlimited
#       LimitRequestBody        unlimited
#       LimitResponseBody       unlimited
#       # WebSocketsProtocol    chat
#       # WebSocketsPing        30sec
#       # IgnoreEncodingErrors  on
#       # PreserveFrames        off
#   </Route>

#
#   Include per-app configuration
#
Include apps/*.conf
